{"version":3,"sources":["yearlyFilters.js","App.js","serviceWorker.js","index.js"],"names":["YearlyFilters","props","Fragment","value","onClick","btnClicked","className","App","yearWiseFilterHandler","e","filteredprograms","state","missions","filter","program","launch_year","target","setState","filteredMissions","axios","get","then","response","data","this","map","item","i","src","links","mission_patch","alt","mission_id","mission_name","launch_success","rocket","first_stage","cores","land_success","Component","Boolean","window","location","hostname","match","ReactDOM","hydrate","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4e522484.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// functional component\r\nfunction YearlyFilters(props) {\r\n    return (\r\n        <React.Fragment>\r\n            <button value=\"2006\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2006</button>\r\n            <button value=\"2007\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2007</button>\r\n            <button value=\"2008\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2008</button>\r\n            <button value=\"2009\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2009</button>\r\n            <button value=\"2010\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2010</button>\r\n            <button value=\"2011\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2011</button>\r\n            <button value=\"2012\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2012</button>\r\n            <button value=\"2013\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2013</button>\r\n            <button value=\"2014\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2014</button>\r\n            <button value=\"2015\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2015</button>\r\n            <button value=\"2016\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2016</button>\r\n            <button value=\"2017\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2017</button>\r\n            <button value=\"2018\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2018</button>\r\n            <button value=\"2019\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2019</button>\r\n            <button value=\"2020\" onClick={props.btnClicked} className=\"btn btn-outline-info m-2\">2020</button>\r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default YearlyFilters;","import React, { Component } from \"react\";\nimport axios from 'axios';\nimport \"./App.css\";\nimport YearlyFilters from './yearlyFilters';\n\n\n// class based component\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      missions: [],\n      filteredMissions: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('https://api.spacexdata.com/v3/launches?limit=100').then(response => {\n      this.setState({ missions: response.data });\n    })\n  }\n\n  // Yearswise filtering SpaceX programs\n  yearWiseFilterHandler = (e) => {\n    const filteredprograms = this.state.missions.filter(program => program.launch_year === e.target.value);\n    this.setState({\n      filteredMissions: filteredprograms\n    });\n\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1 className=\"heading\">SpaceX Launch Programs</h1><hr />\n        <YearlyFilters btnClicked={this.yearWiseFilterHandler} />\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            {\n              // iterate through all items in the fetched array\n              this.state.filteredMissions.map((item, i) =>\n                <div className=\"col-sm-6 col-md-4 col-lg-3\">\n                  <div className=\"card-deck\">\n                    <div className=\"card bg-light mb-3 mt-4\">\n                      <img src={item.links.mission_patch} className=\"card-img-top mt-2 p-2 img-fluid\" alt=\"...\" />\n                      <div className=\"card-body\">\n                        <p className=\"font-weight-bold\">Mission Ids: <span className=\"card-title text-muted\"><small>{item.mission_id}</small></span></p>\n                        <p className=\"font-weight-bold\">Mission Name: <span className=\"card-title text-muted\"><small>{item.mission_name}</small></span></p>\n                        <p className=\"font-weight-bold\">Launch Year: <span className=\"card-text text-muted\"><small>{item.launch_year}</small></span></p>\n                        <p className=\"font-weight-bold\">Successful Launch: <span className=\"card-text text-muted\"><small>{item.launch_success ? \"true\" : \"false\"}</small></span></p>\n                        <p className=\"font-weight-bold\">Successful Land: <span className=\"card-text text-muted\"><small>{item.rocket.first_stage.cores[0].land_success ? \"true\" : \"false\"}</small></span></p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )\n            }\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.hydrate(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}